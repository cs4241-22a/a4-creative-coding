{"version":3,"file":"bundle.535bbd2ffe74b8fe.js","mappings":"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","sources":["webpack:///./src/experience/sounds/api/Sound.js","webpack:///./src/experience/sounds/api/LoadedSound.js","webpack:///./src/experience/sounds/Kick.js","webpack:///./src/experience/sounds/Snare.js","webpack:///./src/experience/util/ButtonPressHandler.js","webpack:///./src/experience/util/KeyPressHandler.js","webpack:///./src/experience/Experience.js","webpack:///./src/script.js"],"sourcesContent":["import Experience from \"../../Experience\"\r\n\r\nexport default class Sound\r\n{\r\n    constructor(triggerID)\r\n    {\r\n        this.triggerID = triggerID;\r\n        this.experience = new Experience()\r\n        this.experience.buttonPressHandler.addButtonPressEvent(`btn${triggerID}`, () => (this.trigger()))\r\n        this.experience.keyPressHandler.addKeyPress(`${triggerID}`, () => (this.trigger()))\r\n    }\r\n\r\n    _setup()\r\n    {\r\n        throw new Error(\"Method '_setup()' must be implemented.\")\r\n\r\n    }\r\n    \r\n    _playSound()\r\n    {\r\n        throw new Error(\"Method '_playSound()' must be implemented.\")\r\n    }\r\n\r\n    trigger()\r\n    {\r\n        this._setup()\r\n        this._playSound()\r\n    }\r\n}","import Sound from \"./Sound\";\r\n\r\nexport default class LoadedSounded extends Sound\r\n{\r\n    constructor(fileName, triggerID)\r\n    {\r\n        super(triggerID)\r\n        this.fileName = fileName\r\n        this.loaded = false\r\n        this._loadSound()\r\n    }\r\n\r\n    _setup()\r\n    {\r\n        this.source = this.experience.audioContext.createBufferSource()\r\n        this.source.buffer = this.buffer\r\n        this.gain = this.experience.audioContext.createGain()\r\n        this.source.connect(this.gain)\r\n\r\n        this.gain.connect(this.experience.audioContext.destination)\r\n\r\n    }\r\n\r\n    _playSound()\r\n    {\r\n        let gain = this.experience.params[`btn${this.triggerID}_gain`]\r\n        console.log(gain)\r\n        let time = this.experience.audioContext.currentTime\r\n        this.gain.gain.setValueAtTime(gain, time)\r\n        this.source.start(this.experience.audioContext.currentTime)\r\n    }\r\n\r\n    trigger()\r\n    {\r\n        if(!this.loaded)\r\n            throw new Error(\"Sound not loaded!\")\r\n\r\n        this._setup()\r\n        this._playSound()\r\n    }\r\n\r\n    _loadSound()\r\n    {\r\n        fetch( `${this.fileName}`, {\r\n            method:'GET'\r\n        })\r\n        .then(response => {\r\n            if(!response.ok)\r\n                throw new Error(`HTTP error, status = ${response.status}`)\r\n            \r\n            return response.arrayBuffer()\r\n        })\r\n        .then(buffer => this.experience.audioContext.decodeAudioData(buffer))\r\n        .then(decodedData => {\r\n            this.buffer = decodedData;\r\n            this.loaded = true;\r\n        })\r\n    }\r\n}","import Sound from \"./api/Sound\";\r\n\r\nexport default class Kick extends Sound\r\n{\r\n    constructor(triggerID)\r\n    {\r\n        super(triggerID)\r\n    }\r\n\r\n    _setup()\r\n    {\r\n        this.oscillator = this.experience.audioContext.createOscillator();\r\n        this.gain = this.experience.audioContext.createGain();\r\n\r\n        //connect oscillator node to gain node\r\n        this.oscillator.connect(this.gain)\r\n        //connect gain node to speakers\r\n        this.gain.connect(this.experience.audioContext.destination)\r\n    }\r\n\r\n    _playSound()\r\n    {        \r\n        let time = this.experience.audioContext.currentTime\r\n        this.gain.gain.setValueAtTime(1, time)\r\n        this.gain.gain.exponentialRampToValueAtTime(0.001, time + 0.5 * this.experience.params.kickTimeMultiplier)\r\n        this.oscillator.frequency.setValueAtTime(150 * this.experience.params.kickTimeMultiplier, time)\r\n        this.oscillator.frequency.exponentialRampToValueAtTime(0.001, time + 0.5 * this.experience.params.kickTimeMultiplier)\r\n\r\n        this.oscillator.start(time)\r\n        this.oscillator.stop(time + 2 * this.experience.params.kickTimeMultiplier)\r\n    }\r\n}","import Sound from \"./api/Sound\";\r\n\r\nexport default class Snare extends Sound\r\n{\r\n    constructor(triggerID)\r\n    {\r\n        super(triggerID)\r\n    }\r\n\r\n    noiseBuffer()\r\n    {\r\n        let bufferSize = this.experience.audioContext.sampleRate;\r\n        let buffer = this.experience.audioContext.createBuffer(1, bufferSize, this.experience.audioContext.sampleRate)\r\n        let output = buffer.getChannelData(0)\r\n\r\n        for(let i = 0; i < bufferSize; i++)\r\n        {\r\n            output[i] = Math.random() * 2 - 1\r\n        }\r\n\r\n        return buffer;\r\n    }\r\n\r\n    _setup()\r\n    {\r\n        this.noise = this.experience.audioContext.createBufferSource();\r\n        this.noise.buffer = this.noiseBuffer()\r\n\r\n        let noiseFilter = this.experience.audioContext.createBiquadFilter()\r\n        noiseFilter.type = \"highpass\"\r\n        noiseFilter.frequency.value = 1000;\r\n        this.noise.connect(noiseFilter)\r\n\r\n        this.noiseEnvelope = this.experience.audioContext.createGain()\r\n        noiseFilter.connect(this.noiseEnvelope)\r\n        this.noiseEnvelope.connect(this.experience.audioContext.destination)\r\n    \r\n        //Create Snap effect of snare\r\n        this.oscillator = this.experience.audioContext.createOscillator()\r\n        this.oscillator.type = \"triangle\"\r\n\r\n        this.oscillatorEnvelope = this.experience.audioContext.createGain()\r\n        this.oscillator.connect(this.oscillatorEnvelope)\r\n        this.oscillatorEnvelope.connect(this.experience.audioContext.destination)\r\n    }\r\n\r\n    _playSound()\r\n    {\r\n        let time = this.experience.audioContext.currentTime\r\n\r\n        this.noiseEnvelope.gain.setValueAtTime(1, time)\r\n\r\n        this.noiseEnvelope.gain.exponentialRampToValueAtTime(0.01, time + 0.2)\r\n        this.noise.start(time)\r\n\r\n        this.oscillator.frequency.setValueAtTime(100, time)\r\n        this.oscillatorEnvelope.gain.setValueAtTime(0.7, time)\r\n        this.oscillatorEnvelope.gain.exponentialRampToValueAtTime(0.01, time + 0,1)\r\n        this.oscillator.start(time)\r\n\r\n        this.oscillator.stop(time + 0.2)\r\n        this.noise.stop(time + 0.2)\r\n    }\r\n\r\n}","import Experience from \"../Experience\";\r\n\r\nexport default class ButtonPressHandler\r\n{\r\n\r\n    constructor()\r\n    {\r\n        this.experience = new Experience();\r\n    }\r\n\r\n    addButtonPressEvent(elementID, triggerFunction)\r\n    {\r\n        document.getElementById(elementID).addEventListener('click', () => triggerFunction())\r\n    }\r\n}","import Experience from \"../Experience\";\r\n\r\nexport default class KeyPressHandler\r\n{\r\n    constructor()\r\n    {\r\n        this.experience = new Experience()\r\n        //stores keycode, function to call\r\n        this.keyMap = new Map();\r\n        window.addEventListener(\"keydown\", (event) => (this._onKeyPress(event)))\r\n    }\r\n\r\n    addKeyPress(key, triggerFunction)\r\n    {\r\n        this.keyMap.set(key.toUpperCase().charCodeAt(0), triggerFunction)\r\n        this.keyMap.set(this._getNumPadKey(key), triggerFunction)\r\n    }\r\n\r\n    removeKeyPress(key)\r\n    {\r\n        this.keyMap.delete(key)\r\n    }\r\n\r\n    _onKeyPress(event)\r\n    {\r\n        let key = event.keyCode\r\n        let triggerFunction = this.keyMap.get(key)\r\n\r\n        if(triggerFunction)\r\n            triggerFunction()\r\n    }\r\n    \r\n    _getNumPadKey(key)\r\n    {\r\n        switch(key)\r\n        {\r\n            case \"9\":\r\n                return 33\r\n            case \"8\":\r\n                return 38\r\n            case \"7\":\r\n                return 36\r\n            case \"6\":\r\n                return 39\r\n            case \"5\":\r\n                return 12\r\n            case \"4\":\r\n                return 32\r\n            case \"3\":\r\n                return 34\r\n            case \"2\":\r\n                return 40\r\n            case \"1\":\r\n                return 35\r\n        }\r\n\r\n        return key;\r\n    }\r\n}","import LoadedSounded from './sounds/api/LoadedSound'\r\nimport HiHat from './sounds/HiHat'\r\nimport Kick from './sounds/Kick'\r\nimport Snare from './sounds/Snare'\r\nimport ButtonPressHandler from './util/ButtonPressHandler'\r\nimport KeyPressHandler from './util/KeyPressHandler'\r\n\r\nlet instance = null\r\n//https://analogcases.com/blogs/news/analog-supplies-vol-3\r\nexport default class Experience\r\n{\r\n    constructor(_svgID)\r\n    {\r\n        if(instance)\r\n        {\r\n            return instance\r\n        }        \r\n        instance = this\r\n        this.pane = new Tweakpane.Pane()\r\n        this.tweekPaneInit()\r\n\r\n        this.kick = null\r\n        this.snare = null\r\n        this.buttonPressHandler = new ButtonPressHandler()\r\n        this.keyPressHandler = new KeyPressHandler()\r\n\r\n        this.buttonPressHandler.addButtonPressEvent(\"start\", () => (this.onInfoPress()))\r\n    }\r\n\r\n    onInfoPress()\r\n    {\r\n        if(!this.audioContext)\r\n            this.setup()\r\n\r\n        document.getElementById(\"information\").style.visibility = \"hidden\"\r\n    }\r\n\r\n    tweekPaneInit()\r\n    {\r\n        this.params = {\r\n            kickTimeMultiplier: 1,\r\n            btn9_gain: 1,\r\n            btn8_gain: 1,\r\n            btn7_gain: 1,\r\n            btn6_gain: 1,\r\n            btn5_gain: 1,\r\n            btn4_gain: 1,\r\n            btn3_gain: 1,\r\n            btn2_gain: 1,\r\n            btn1_gain: 1,\r\n        }\r\n\r\n        this.pane.addInput(\r\n            this.params, \"kickTimeMultiplier\",\r\n            {min: .1, max: 5, step: .1},\r\n        )\r\n\r\n        this.pane.addInput(\r\n            this.params, \"btn9_gain\",\r\n            {min: .1, max: 5, step: .1},\r\n        )\r\n\r\n        this.pane.addInput(\r\n            this.params, \"btn8_gain\",\r\n            {min: .1, max: 5, step: .1},\r\n        )\r\n\r\n        this.pane.addInput(\r\n            this.params, \"btn7_gain\",\r\n            {min: .1, max: 5, step: .1},\r\n        )\r\n\r\n        this.pane.addInput(\r\n            this.params, \"btn6_gain\",\r\n            {min: .1, max: 5, step: .1},\r\n        )\r\n\r\n        this.pane.addInput(\r\n            this.params, \"btn5_gain\",\r\n            {min: .1, max: 5, step: .1},\r\n        )\r\n\r\n        this.pane.addInput(\r\n            this.params, \"btn4_gain\",\r\n            {min: .1, max: 5, step: .1},\r\n        )\r\n\r\n        this.pane.addInput(\r\n            this.params, \"btn3_gain\",\r\n            {min: .1, max: 5, step: .1},\r\n        )\r\n\r\n        this.pane.addInput(\r\n            this.params, \"btn2_gain\",\r\n            {min: .1, max: 5, step: .1},\r\n        )\r\n\r\n        this.pane.addInput(\r\n            this.params, \"btn1_gain\",\r\n            {min: .1, max: 5, step: .1},\r\n        )\r\n    }\r\n\r\n    setup()\r\n    {\r\n        this.audioContext = new (window.AudioContext || window.webkitAudioContext)\r\n        this.kick = new Kick(\"9\")\r\n        this.snare = new Snare(\"8\")\r\n        this.hihat = new LoadedSounded(\"hi_hat.wav\", \"7\")\r\n        this.sizzle = new LoadedSounded(\"sizzel_snap.wav\", \"6\")\r\n        this.tunnel = new LoadedSounded(\"tunnel_shaker.wav\", \"5\")\r\n        this.low_and_slow = new LoadedSounded(\"low_and_slow_kick.wav\", \"4\")\r\n        this.throat = new LoadedSounded(\"throat_kick.wav\", \"3\")\r\n        this.fly = new LoadedSounded(\"fly_hi_hat.wav\", \"2\")\r\n        this.short = new LoadedSounded(\"short_and_sweet_hi_hat.wav\", \"1\")\r\n    }\r\n}","import './style.css'\r\nimport Experience from \"./experience/Experience\";\r\n\r\nlet experience = new Experience(\"experience\")\r\nwindow.experience = experience"],"names":["Sound","constructor","triggerID","this","experience","Experience","buttonPressHandler","addButtonPressEvent","trigger","keyPressHandler","addKeyPress","_setup","Error","_playSound","LoadedSounded","fileName","super","loaded","_loadSound","source","audioContext","createBufferSource","buffer","gain","createGain","connect","destination","params","console","log","time","currentTime","setValueAtTime","start","fetch","method","then","response","ok","status","arrayBuffer","decodeAudioData","decodedData","Kick","oscillator","createOscillator","exponentialRampToValueAtTime","kickTimeMultiplier","frequency","stop","Snare","noiseBuffer","bufferSize","sampleRate","createBuffer","output","getChannelData","i","Math","random","noise","noiseFilter","createBiquadFilter","type","value","noiseEnvelope","oscillatorEnvelope","ButtonPressHandler","elementID","triggerFunction","document","getElementById","addEventListener","KeyPressHandler","keyMap","Map","window","event","_onKeyPress","key","set","toUpperCase","charCodeAt","_getNumPadKey","removeKeyPress","delete","keyCode","get","instance","_svgID","pane","Tweakpane","Pane","tweekPaneInit","kick","snare","onInfoPress","setup","style","visibility","btn9_gain","btn8_gain","btn7_gain","btn6_gain","btn5_gain","btn4_gain","btn3_gain","btn2_gain","btn1_gain","addInput","min","max","step","AudioContext","webkitAudioContext","hihat","sizzle","tunnel","low_and_slow","throat","fly","short"],"sourceRoot":""}